
/*Template Proiect AEMC - ETTI Iasi*/
#include <xc.h>
#include "lcd.h"
#include <16F887.h>


__PROG_CONFIG (1,0x20D4); 	// config. uC 
__PROG_CONFIG (2,0x0000); 	// config. uC 
/////DEFINES/////
#define _XTAL_FREQ 8000000
//#define LED1 RB0 
//#define LED2 RB1
#define butoninc RC2
#define butonalarm RC1
#define butontimp RC0

////VARIABLE DECLARATION/////
char *logo  = (char *) "AEMC - proiect LCD";
char *logo1 = (char *) "linia_1";
char *logo2 = (char *) "linia_2";
char *logo3 = (char *) "linia_3";
char *logo4 = (char *) "linia_4";
char *tempanalog = (char *) "Temperatura LM35";
char message1[] = "Temp 00.0 C  ";
char message2[] = "Humidity 00.0 %  ";
unsigned int Temp_byte1, Temp_byte2, Humidity_byte1, Humidity_byte2, CheckSum, Check;
////FUNCTION PROTOTYPE/////
void init_uC(void); 
void StartSignalDHT11(void);
void CheckResponseDHT11(void);
unsigned int ReadDataDHT11(void);
//void interrupt etti(void); 	// functie de intreruperi globala ptr. TOATE intreruperile de pe un 
void init_LCD(void);
void lcd_goto(unsigned char pos);
void lcd_puts(char * s);
void lcd_putch(char c);
void afisare_diacritice(unsigned char diacritic_afisat, unsigned char linia);
unsigned char Citeste_ADC(unsigned char canal);
float conversietemp(float volt, int adctemp);
////////////////////////////////////////////////////////
void main(void)
 {
	init_uC();
	init_LCD();
	lcd_clear()
	///DHT11//
	StartSignalDHT11();
    if(CheckResponseDHT11()){
        Humidity_byte1=ReadDataDHT11();//read humidity byte1
        Humidity_byte2=ReadDataDHT11();//read humidity byte2
        Temp_byte1=ReadDataDHT11();//read temperature byte1
        Temp_byte2=ReadDataDHT11();//read temperature byte1
        if(CheckSum==((Humidity_byte1+Humidity_byte2+Temp_byte1+Temp_byte2)& 0xFF)){
          message1[7]  = Temp_byte1/10  + 48;
          message1[8]  = Temp_byte1%10  + 48;
          message1[10] = Temp_byte2/10  + 48;
          message2[7]  = Humidity_byte1/10 + 48;
          message2[8]  = Humidity_byte1%10 + 48;
          message2[10] = Temp_byte2/10 + 48;
          message1[11] = 223; 
        }
    }
    lcd_goto(0x80);
    lcd_puts(message1);
    lcd_goto(0xC0);
    lcd_puts(message2);
	/*while (1)
	{
		
	   if(RC2==0)// buton incrementare e apasat;
	   {
		   
		   
	}
    }    
 */
 }
////////////////////////////////////////////////////////////
 void init_uC (void) 
{ 	
	OSCCON 	= 0x71;			// setez Osc. intern uC de 8MHz // pag. 64
	ADCON1 = 0x10;// A/D Clock Fosc/8
    TRISA = 0xC1;//RA7,RA6,RA0 intrare
    TRISB = 0x33;//RB5,RB0 intrare
    TRISC = 0x07;//RB3,2,1 intrare(butoane)
    TRISD = 0x00;
    TRISE = 0x09;
    ANSEL = 0x21;
    ANSELH = 0x30;
	PORTB = 0b00000000;	// initializez PORTB cu valori de 0 logic
	OPTION_REG = 0b00000111;// Frecv. intrare T0 = Frecv. Osc./4 (=8MHz/4) = 2MHz
							// prescaler=256 => Frecv. T0 = 2MHz/256 = KHz (sau T=128us)
	TMR0IF 	= 0;			// 
	TMR0 	= 178;	  		// porneste numararea de la valoarea 178; pana la maxim (255) 
	TMR0IE 	= 1;    		// activez intreruperea ptr. T0
	GIE 	= 1;       		// activez Global intreruperile
	
} 
 //////////////////////////////////////////////////////
unsigned char Citeste_ADC(unsigned char canal)
{
    ADCON0 = 0x00; //curat adcon0
    ADCON0 = (canal << 2); //selectam canal ADC, 2 biti ca sa ajungem pe bitii canalului
    ADON = 1; //seteaza bitul ADON din interiorul ADC sa fie ON
    
    __delay_ms(2000);//delay pt AD sa citeasca corect
        
    GO_nDONE = 1;//porneste conversia
    while(GO_nDONE);//pauza pana cand A/D termina conversia
    ADON = 0;//inchidem A/D
    return ADRESH;//returnez valoarea convertita
    
}
////////////////////////////////////////////////////////
float conversiontemp(float volt,int adctemp)
{
	adctemp=Citeste_ADC(5);//citire valoare ADC pt LM35
	volt=adctemp*4.883;
	return volt;
}

///////////////////////////////////////////////////////////
//void interrupt etti(void)	// ajung aici la fiecare 78*128us=~10ms
void __interrupt() etti(void)
{       
	if(TMR0IF)				// daca flagul TMR0IF=1
	{
		 TMR0IF = 0;   		// obligatoriu - sterg flagul Timerului care a generat intreruperea
		 TMR0 = 178;  		// 
		 LED2 = !LED2; 		// 
	}
}
///DHT11 FUNCTIONS-temperature and humidity sensor///
/////////////////////////////////////////////////
//DHT11 will not give any response without the start signal and will remain in low power consumption mode or in sleep mode
void StartSignalDHT11(void){
 TRISB.B0 = 0; //Configure RB0 as output
 PORTB.B0 = 0; //RD0 sends 0 to the sensor
 __delay_ms(18);
 PORTB.B0 = 1; //RB0 sends 1 to the sensor
 __delay_us(30);
 TRISD.B0 = 1; //Configure RB0 as input
 }
 //////////////////////////////
//shortly we check if the dht11 is awake
 void CheckResponseDHT11(){
 Check = 0;
 __delay_us(40);
 if (PORTB.B0 == 0){
 __delay_us(80);
 if (PORTB.B0 == 1)
     Check = 1; __delay_us(40);}
 }
 //////////////////////////////
 unsigned int ReadDataDHT11(void){
 unsigned int i, j;
 for(j = 0; j < 8; j++){
 while(!PORTB.B0); //Wait until PORTB.B0 goes HIGH
 __delay_us(30);
 if(PORTB.B0 == 0)
 i&= ~(1<<(7 - j)); //Clear bit (7-j)
 else {i|= (1 << (7 - j)); //Set bit (7-j)
 while(PORTB.B0);} //Wait until PORTB.B0 goes LOW
 }
 return i;//i=data
 }
 //////////////////////////////