/*Template Proiect AEMC - ETTI Iasi*/
#include <xc.h>
#include<math.h>


__PROG_CONFIG(1,0x20D4); 	// config. uC 
__PROG_CONFIG(2,0x0000); 	// config. uC 
#define _XTAL_FREQ 8000000
#define LED2 RB1
#define butoninc RC2
#define butonalarm RC1
#define butontimp RC0
#define dhtpin RE1
#define dhtpin_dir  TRISE1



char *tempanalog = (char *) " Temperatura LM35";
char *luminanalog = (char *) "luminozitate";
char *tempdht = (char *) "temp dht";
char *umiddht = (char *) "umid dht";
char *lum = (char *) "lumeni/m^2";


void init_uC(void); 
void interrupt etti(void); 	// functie de intreruperi globala ptr. TOATE intreruperile de pe un 
void init_LCD(void);
void lcd_goto(unsigned char pos);
void lcd_puts(char * s);
void lcd_putch(char c);
void lcd_clear(void);
void lm35(void);
void luminozitate(void);
void initializare_dht(void);
unsigned short raspuns_dht(void);
unsigned short citire_dht(unsigned short *);
void afisare_dht(void);
unsigned int Citeste_ADC(unsigned char canal);
char temperatura[]="temperatura = 00.0C";
char umiditate[]="umiditate = 00.0%";
unsigned short tempbyte1, tempbyte2, umidbyte1, umidbyte2, suma;
void main(void)
 { 
	
	init_uC();
	init_LCD();
	 
	
	 
	 while(1)
	 {
		
		
	lm35();
	 luminozitate();
		 
    //afisare_dht();
    
 }
}
	 
	 
	 
	
	
 
 
 
 void init_uC (void) 
{ 	
	OSCCON 	= 0x71;			// setez Osc. intern uC de 8MHz // pag. 64
	ADCON0 = 0b10000001;
	ADCON1 = 0x80;
	T1CON=0x10;
	TMR1H=0;
	TMR1L=0;
    TRISA = 0x01;//RA7,RA6,RA0 intrare
    TRISB = 0x00;//RB5,RB0 intrare
    TRISC = 0x00;//RB3,2,1 intrare(butoane)
    TRISD = 0x00;
    TRISE = 0b00000011;
    ANSEL = 0b00000001;
    ANSELH = 0x00;
	PORTB = 0b00000000;	// initializez PORTB cu valori de 0 logic
	OPTION_REG = 0b00000111;// Frecv. intrare T0 = Frecv. Osc./4 (=8MHz/4) = 2MHz
							// prescaler=256 => Frecv. T0 = 2MHz/256 = KHz (sau T=128us)
	TMR0IF 	= 0;			// 
	TMR0 	= 178;	  		// porneste numararea de la valoarea 178; pana la maxim (255) 
	TMR0IE 	= 1;    		// activez intreruperea ptr. T0
	GIE 	= 1;       		// activez Global intreruperile
	
} 
unsigned int Citeste_ADC(unsigned char canal)
{
   if(canal > 13)
		return 0;
    ADCON0 &= 0xC3;
    ADCON0 |= (canal << 2); 
    
    __delay_ms(100);
        
    GO_nDONE = 1;
    while(GO_nDONE);
    return ((ADRESH<<8)+ADRESL);
    
}

void lm35(void)
{
	int adc,temp1,c1,c2,c3,c4;
	float volt,temp;
	adc=Citeste_ADC(5);
		 volt=adc*4.882;
		 temp=volt/10.0;
		 temp1=temp*100;
		 c1=(temp1/1000)%10;
		 c2=(temp1/100)%10;
		 c3=(temp1/10)%10;
		 c4=(temp1/1)%10;
		 
		__delay_ms(2);
		 lcd_goto(0xC1);
		 __delay_ms(2);
		lcd_puts(tempanalog);
		 __delay_ms(2);
		 lcd_goto(0x99);
		  __delay_ms(2);
		 lcd_putch(c1+'0');
		  __delay_ms(2);
		 lcd_putch(c2+'0');
		  __delay_ms(2);
		 lcd_putch(c3+'0');
		 lcd_puts(".");
		  __delay_ms(2);;
		lcd_putch(c4+'0');
		 __delay_ms(2);
		lcd_putch(0xDF);
		 __delay_ms(2);
		 lcd_puts("C");
}
void luminozitate(void)
{
		 int adc,c0,c1,c2,c3,c4;
		  float r1=10.0,curent;
		 float lv,lum,ressenz;
		 adc=Citeste_ADC(0);
		 lv=adc*4.882;
		 lv/=1000;
		  ressenz=(5-lv)/(lv/r1);
		  ressenz=(pow(10,5.07)*pow(ressenz,(-0.9)))/10;
		  int result=(int)ressenz;
		 c1=(result/1000)%10;
		 c2=(result/100)%10;
		 c3=(result/10)%10;
		 c4=(result/1)%10;
		  __delay_ms(2);
		 lcd_goto(0xC4);
		 __delay_ms(2);
		 lcd_puts(luminanalog);
		 __delay_ms(2);
		 lcd_goto(0x98);
		  __delay_ms(2);
		 lcd_putch(c1+'0');
		  __delay_ms(2);
		 lcd_putch(c2+'0');
		  __delay_ms(2);
		 lcd_puts(".");
		  __delay_ms(2);
		 lcd_putch(c3+'0');
		   __delay_ms(2);
		lcd_putch(c4+'0');
		__delay_ms(2);
		lcd_puts("lumeni/m^2");
}


void initializare_dht(void)
{
		dhtpin_dir = 0;
		 dhtpin = 0;
		 __delay_ms(25);
		 dhtpin = 1;
		 __delay_us(25);
		 dhtpin_dir = 1;
}


unsigned short raspuns_dht()
{
	TMR1H = 0;
	TMR1L = 0;
	TMR1ON = 1;
	while(!dhtpin && TMR1L < 100);
	if(TMR1L > 99)
		return 0;
	else {    TMR1H = 0; 
		  TMR1L = 0;
		  while(dhtpin && TMR1L < 100);
		  if(TMR1L > 99)
		  {
		  	return 0;
		  }
		  else
		  {
		  	return 1;
		  }
             }
}
unsigned short citire_dht(unsigned short* dhtdata)
{ 
	 short i;
	 *dhtdata = 0;
	 
			 for( int i = 0; i < 8; i++)
			 {
				 TMR1H=0;
				 TMR1L=0;
				 while(!dhtpin)
				 {
				    if(TMR1L > 100)
				    {
				       return 1;
				    }
				    TMR1H = 0;
				    TMR1L = 0;
				 }
				 while(dhtpin)
				 if(TMR1L > 100)
				    if(TMR1L > 100)
				    {
				       return 1;
				 }
				 if(TMR1L > 50)
				    *dhtdata |=(1<<(7-i));
			      }
				 return 0;
				 
} 


void afisare_dht(void)
{
	initializare_dht();                
	    if(raspuns_dht()) 
	    {
	    	if(citire_dht(&umidbyte1) || citire_dht(&umidbyte2) || citire_dht(&tempbyte1) || citire_dht(&tempbyte2) || citire_dht(&suma)) 
		{
			lcd_clear();
			lcd_goto(0x80);
			lcd_puts((char *) "eroare la citirea datelor");
		}
		else {
			if(suma == ((umidbyte1 + umidbyte2 + tempbyte1 + tempbyte2) & 0xFF))
				{
					temperatura[14]  = (tempbyte1/10  + 48);
			      		temperatura[15]  = (tempbyte1%10  + 48);
			      		temperatura[17] = (tempbyte2/10  + 48);
			      		umiditate[12]     = (umidbyte1/10 + 48);
			      		umiditate[13]     = (umidbyte1%10 + 48);
			      		umiditate[15]    = (umidbyte2/10 + 48);
			      		temperatura[18] = 223;                      
			      		lcd_goto(0xC2);
			      		lcd_puts(temperatura);
			      		lcd_goto(0x96);
			      		lcd_puts(umiditate);
         
				  }
			else {
				lcd_clear();
			      	lcd_goto(0x80);
			      	lcd_puts((char*) "verifica suma");
				}
			}
		}
		else {
			lcd_goto(0x80);
		     	lcd_puts((char*) "Niciun");
		     	lcd_goto(0xC0);
		     	lcd_puts((char*) "raspuns");
		     }
	TMR1ON = 0;
	__delay_ms(1000);
	
 }

			 
			 
	 



void interrupt etti(void)	// ajung aici la fiecare 78*128us=~10ms
{       
	if(TMR0IF)				// daca flagul TMR0IF=1
	{
		 TMR0IF = 0;   		// obligatoriu - sterg flagul Timerului care a generat intreruperea
		 TMR0 = 178;  		// 
		 LED2 = !LED2; 		// 
	}
}
